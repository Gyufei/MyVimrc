
# Function
snippet fun
function ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet
snippet :f "Object Method"
${1:method_name}: function (${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

# Flow control
# return
snippet ret "return"
return ${0:result}
endsnippet
# if
snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet
# if ... else
snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet
# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet
# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break
	${0}
	default:
		${2}
}
endsnippet
snippet case "case 'xyz': ... break"
case '${1:case}':
	${0:${VISUAL}}
	break
endsnippet

# Loop
# for
snippet for "for (...) {...}"
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
}
endsnippet
# for reverse
snippet forr "reversed for (...) {...}"
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet
# for in
snippet fori
for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet

# Catch Error
snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet
snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

# JSON
# JSON.parse
snippet jsonp
JSON.parse(${0:jstr})
endsnippet
# JSON.stringify
snippet jsons
JSON.stringify(${0:object})
endsnippet

# Console
snippet cl "console.log"
console.log(${0})
endsnippet

# setTimeout function
snippet timeout
setTimeout(() => {${0}}${2}, ${1:10})
endsnippet
